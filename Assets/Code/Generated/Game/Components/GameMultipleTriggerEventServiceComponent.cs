//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMultipleTriggerEventService;

    public static Entitas.IMatcher<GameEntity> MultipleTriggerEventService {
        get {
            if (_matcherMultipleTriggerEventService == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MultipleTriggerEventService);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMultipleTriggerEventService = matcher;
            }

            return _matcherMultipleTriggerEventService;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Common.MultipleTriggerEventServiceComponent multipleTriggerEventService { get { return (Code.Gameplay.Common.MultipleTriggerEventServiceComponent)GetComponent(GameComponentsLookup.MultipleTriggerEventService); } }
    public Code.Gameplay.Common.Physics.IMultipleTriggerEventService MultipleTriggerEventService { get { return multipleTriggerEventService.Value; } }
    public bool hasMultipleTriggerEventService { get { return HasComponent(GameComponentsLookup.MultipleTriggerEventService); } }

    public GameEntity AddMultipleTriggerEventService(Code.Gameplay.Common.Physics.IMultipleTriggerEventService newValue) {
        var index = GameComponentsLookup.MultipleTriggerEventService;
        var component = (Code.Gameplay.Common.MultipleTriggerEventServiceComponent)CreateComponent(index, typeof(Code.Gameplay.Common.MultipleTriggerEventServiceComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMultipleTriggerEventService(Code.Gameplay.Common.Physics.IMultipleTriggerEventService newValue) {
        var index = GameComponentsLookup.MultipleTriggerEventService;
        var component = (Code.Gameplay.Common.MultipleTriggerEventServiceComponent)CreateComponent(index, typeof(Code.Gameplay.Common.MultipleTriggerEventServiceComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMultipleTriggerEventService() {
        RemoveComponent(GameComponentsLookup.MultipleTriggerEventService);
        return this;
    }
}
