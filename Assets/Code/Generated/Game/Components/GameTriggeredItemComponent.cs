//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTriggeredItem;

    public static Entitas.IMatcher<GameEntity> TriggeredItem {
        get {
            if (_matcherTriggeredItem == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TriggeredItem);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTriggeredItem = matcher;
            }

            return _matcherTriggeredItem;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Player.TriggeredItem triggeredItem { get { return (Code.Gameplay.Features.Player.TriggeredItem)GetComponent(GameComponentsLookup.TriggeredItem); } }
    public GameEntity TriggeredItem { get { return triggeredItem.Value; } }
    public bool hasTriggeredItem { get { return HasComponent(GameComponentsLookup.TriggeredItem); } }

    public GameEntity AddTriggeredItem(GameEntity newValue) {
        var index = GameComponentsLookup.TriggeredItem;
        var component = (Code.Gameplay.Features.Player.TriggeredItem)CreateComponent(index, typeof(Code.Gameplay.Features.Player.TriggeredItem));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTriggeredItem(GameEntity newValue) {
        var index = GameComponentsLookup.TriggeredItem;
        var component = (Code.Gameplay.Features.Player.TriggeredItem)CreateComponent(index, typeof(Code.Gameplay.Features.Player.TriggeredItem));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTriggeredItem() {
        RemoveComponent(GameComponentsLookup.TriggeredItem);
        return this;
    }
}
