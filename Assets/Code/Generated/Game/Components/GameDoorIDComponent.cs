//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDoorID;

    public static Entitas.IMatcher<GameEntity> DoorID {
        get {
            if (_matcherDoorID == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DoorID);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDoorID = matcher;
            }

            return _matcherDoorID;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.LocationFeature.DoorIDComponent doorID { get { return (Code.Gameplay.Features.LocationFeature.DoorIDComponent)GetComponent(GameComponentsLookup.DoorID); } }
    public Code.Gameplay.Features.LocationFeature.DoorID DoorID { get { return doorID.Value; } }
    public bool hasDoorID { get { return HasComponent(GameComponentsLookup.DoorID); } }

    public GameEntity AddDoorID(Code.Gameplay.Features.LocationFeature.DoorID newValue) {
        var index = GameComponentsLookup.DoorID;
        var component = (Code.Gameplay.Features.LocationFeature.DoorIDComponent)CreateComponent(index, typeof(Code.Gameplay.Features.LocationFeature.DoorIDComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDoorID(Code.Gameplay.Features.LocationFeature.DoorID newValue) {
        var index = GameComponentsLookup.DoorID;
        var component = (Code.Gameplay.Features.LocationFeature.DoorIDComponent)CreateComponent(index, typeof(Code.Gameplay.Features.LocationFeature.DoorIDComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDoorID() {
        RemoveComponent(GameComponentsLookup.DoorID);
        return this;
    }
}
